// NOTE: Assertions have been autogenerated by utils/update_mlir_test_checks.py
// RUN: circt-opt -lower-std-to-handshake %s | FileCheck %s
// CHECK-LABEL:   handshake.func @affine_dma_start(
// CHECK-SAME:                                     %[[VAL_0:.*]]: index,
// CHECK-SAME:                                     %[[VAL_1:.*]]: none, ...) -> none attributes {argNames = ["in0", "inCtrl"], resNames = ["outCtrl"]} {
// CHECK:           %[[VAL_2:.*]] = merge %[[VAL_0]] : index
// CHECK:           %[[VAL_3:.*]]:6 = fork [6] %[[VAL_1]] : none
// CHECK:           %[[VAL_4:.*]] = memref.alloc() : memref<100xf32>
// CHECK:           %[[VAL_5:.*]] = memref.alloc() : memref<100xf32, 2>
// CHECK:           %[[VAL_6:.*]] = memref.alloc() : memref<1xi32>
// CHECK:           %[[VAL_7:.*]] = constant %[[VAL_3]]#4 {value = 0 : index} : index
// CHECK:           %[[VAL_8:.*]] = constant %[[VAL_3]]#3 {value = 64 : index} : index
// CHECK:           %[[VAL_9:.*]] = constant %[[VAL_3]]#2 {value = 0 : index} : index
// CHECK:           %[[VAL_10:.*]] = constant %[[VAL_3]]#1 {value = 10 : index} : index
// CHECK:           %[[VAL_11:.*]] = constant %[[VAL_3]]#0 {value = 1 : index} : index
// CHECK:           %[[VAL_12:.*]] = br %[[VAL_2]] : index
// CHECK:           %[[VAL_13:.*]] = br %[[VAL_3]]#5 : none
// CHECK:           %[[VAL_14:.*]] = br %[[VAL_4]] : memref<100xf32>
// CHECK:           %[[VAL_15:.*]] = br %[[VAL_5]] : memref<100xf32, 2>
// CHECK:           %[[VAL_16:.*]] = br %[[VAL_6]] : memref<1xi32>
// CHECK:           %[[VAL_17:.*]] = br %[[VAL_7]] : index
// CHECK:           %[[VAL_18:.*]] = br %[[VAL_8]] : index
// CHECK:           %[[VAL_19:.*]] = br %[[VAL_9]] : index
// CHECK:           %[[VAL_20:.*]] = br %[[VAL_10]] : index
// CHECK:           %[[VAL_21:.*]] = br %[[VAL_11]] : index
// CHECK:           %[[VAL_22:.*]], %[[VAL_23:.*]] = control_merge %[[VAL_13]] : none
// CHECK:           %[[VAL_24:.*]]:9 = fork [9] %[[VAL_23]] : index
// CHECK:           %[[VAL_25:.*]] = buffer [1] seq %[[VAL_26:.*]] {initValues = [0]} : i1
// CHECK:           %[[VAL_27:.*]]:10 = fork [10] %[[VAL_25]] : i1
// CHECK:           %[[VAL_28:.*]] = mux %[[VAL_27]]#9 {{\[}}%[[VAL_22]], %[[VAL_29:.*]]] : i1, none
// CHECK:           %[[VAL_30:.*]] = mux %[[VAL_24]]#8 {{\[}}%[[VAL_20]]] : index, index
// CHECK:           %[[VAL_31:.*]] = mux %[[VAL_27]]#8 {{\[}}%[[VAL_30]], %[[VAL_32:.*]]] : i1, index
// CHECK:           %[[VAL_33:.*]]:2 = fork [2] %[[VAL_31]] : index
// CHECK:           %[[VAL_34:.*]] = mux %[[VAL_24]]#7 {{\[}}%[[VAL_12]]] : index, index
// CHECK:           %[[VAL_35:.*]] = mux %[[VAL_27]]#7 {{\[}}%[[VAL_34]], %[[VAL_36:.*]]] : i1, index
// CHECK:           %[[VAL_37:.*]] = mux %[[VAL_24]]#6 {{\[}}%[[VAL_14]]] : index, memref<100xf32>
// CHECK:           %[[VAL_38:.*]] = mux %[[VAL_27]]#6 {{\[}}%[[VAL_37]], %[[VAL_39:.*]]] : i1, memref<100xf32>
// CHECK:           %[[VAL_40:.*]] = mux %[[VAL_24]]#5 {{\[}}%[[VAL_15]]] : index, memref<100xf32, 2>
// CHECK:           %[[VAL_41:.*]] = mux %[[VAL_27]]#5 {{\[}}%[[VAL_40]], %[[VAL_42:.*]]] : i1, memref<100xf32, 2>
// CHECK:           %[[VAL_43:.*]] = mux %[[VAL_24]]#4 {{\[}}%[[VAL_18]]] : index, index
// CHECK:           %[[VAL_44:.*]] = mux %[[VAL_27]]#4 {{\[}}%[[VAL_43]], %[[VAL_45:.*]]] : i1, index
// CHECK:           %[[VAL_46:.*]] = mux %[[VAL_24]]#3 {{\[}}%[[VAL_16]]] : index, memref<1xi32>
// CHECK:           %[[VAL_47:.*]] = mux %[[VAL_27]]#3 {{\[}}%[[VAL_46]], %[[VAL_48:.*]]] : i1, memref<1xi32>
// CHECK:           %[[VAL_49:.*]] = mux %[[VAL_24]]#2 {{\[}}%[[VAL_17]]] : index, index
// CHECK:           %[[VAL_50:.*]] = mux %[[VAL_27]]#2 {{\[}}%[[VAL_49]], %[[VAL_51:.*]]] : i1, index
// CHECK:           %[[VAL_52:.*]] = mux %[[VAL_24]]#1 {{\[}}%[[VAL_21]]] : index, index
// CHECK:           %[[VAL_53:.*]] = mux %[[VAL_27]]#1 {{\[}}%[[VAL_52]], %[[VAL_54:.*]]] : i1, index
// CHECK:           %[[VAL_55:.*]] = mux %[[VAL_24]]#0 {{\[}}%[[VAL_19]]] : index, index
// CHECK:           %[[VAL_56:.*]] = mux %[[VAL_27]]#0 {{\[}}%[[VAL_55]], %[[VAL_57:.*]]] : i1, index
// CHECK:           %[[VAL_58:.*]]:2 = fork [2] %[[VAL_56]] : index
// CHECK:           %[[VAL_26]] = merge %[[VAL_59:.*]]#0 : i1
// CHECK:           %[[VAL_60:.*]] = arith.cmpi slt, %[[VAL_58]]#0, %[[VAL_33]]#0 : index
// CHECK:           %[[VAL_59]]:11 = fork [11] %[[VAL_60]] : i1
// CHECK:           %[[VAL_61:.*]], %[[VAL_62:.*]] = cond_br %[[VAL_59]]#10, %[[VAL_33]]#1 : index
// CHECK:           sink %[[VAL_62]] : index
// CHECK:           %[[VAL_63:.*]], %[[VAL_64:.*]] = cond_br %[[VAL_59]]#9, %[[VAL_35]] : index
// CHECK:           sink %[[VAL_64]] : index
// CHECK:           %[[VAL_65:.*]], %[[VAL_66:.*]] = cond_br %[[VAL_59]]#8, %[[VAL_38]] : memref<100xf32>
// CHECK:           sink %[[VAL_66]] : memref<100xf32>
// CHECK:           %[[VAL_67:.*]], %[[VAL_68:.*]] = cond_br %[[VAL_59]]#7, %[[VAL_41]] : memref<100xf32, 2>
// CHECK:           sink %[[VAL_68]] : memref<100xf32, 2>
// CHECK:           %[[VAL_69:.*]], %[[VAL_70:.*]] = cond_br %[[VAL_59]]#6, %[[VAL_44]] : index
// CHECK:           sink %[[VAL_70]] : index
// CHECK:           %[[VAL_71:.*]], %[[VAL_72:.*]] = cond_br %[[VAL_59]]#5, %[[VAL_47]] : memref<1xi32>
// CHECK:           sink %[[VAL_72]] : memref<1xi32>
// CHECK:           %[[VAL_73:.*]], %[[VAL_74:.*]] = cond_br %[[VAL_59]]#4, %[[VAL_50]] : index
// CHECK:           sink %[[VAL_74]] : index
// CHECK:           %[[VAL_75:.*]], %[[VAL_76:.*]] = cond_br %[[VAL_59]]#3, %[[VAL_53]] : index
// CHECK:           sink %[[VAL_76]] : index
// CHECK:           %[[VAL_77:.*]], %[[VAL_78:.*]] = cond_br %[[VAL_59]]#2, %[[VAL_28]] : none
// CHECK:           %[[VAL_79:.*]], %[[VAL_80:.*]] = cond_br %[[VAL_59]]#1, %[[VAL_58]]#1 : index
// CHECK:           sink %[[VAL_80]] : index
// CHECK:           %[[VAL_81:.*]] = merge %[[VAL_79]] : index
// CHECK:           %[[VAL_82:.*]]:2 = fork [2] %[[VAL_81]] : index
// CHECK:           %[[VAL_83:.*]] = merge %[[VAL_63]] : index
// CHECK:           %[[VAL_84:.*]]:2 = fork [2] %[[VAL_83]] : index
// CHECK:           %[[VAL_85:.*]] = merge %[[VAL_65]] : memref<100xf32>
// CHECK:           %[[VAL_86:.*]]:2 = fork [2] %[[VAL_85]] : memref<100xf32>
// CHECK:           %[[VAL_87:.*]] = merge %[[VAL_67]] : memref<100xf32, 2>
// CHECK:           %[[VAL_88:.*]]:2 = fork [2] %[[VAL_87]] : memref<100xf32, 2>
// CHECK:           %[[VAL_89:.*]] = merge %[[VAL_69]] : index
// CHECK:           %[[VAL_90:.*]]:2 = fork [2] %[[VAL_89]] : index
// CHECK:           %[[VAL_91:.*]] = merge %[[VAL_71]] : memref<1xi32>
// CHECK:           %[[VAL_92:.*]]:2 = fork [2] %[[VAL_91]] : memref<1xi32>
// CHECK:           %[[VAL_93:.*]] = merge %[[VAL_73]] : index
// CHECK:           %[[VAL_94:.*]]:2 = fork [2] %[[VAL_93]] : index
// CHECK:           %[[VAL_95:.*]] = merge %[[VAL_75]] : index
// CHECK:           %[[VAL_96:.*]]:2 = fork [2] %[[VAL_95]] : index
// CHECK:           %[[VAL_97:.*]] = merge %[[VAL_61]] : index
// CHECK:           %[[VAL_98:.*]], %[[VAL_99:.*]] = control_merge %[[VAL_77]] : none
// CHECK:           %[[VAL_100:.*]]:3 = fork [3] %[[VAL_98]] : none
// CHECK:           sink %[[VAL_99]] : index
// CHECK:           %[[VAL_101:.*]] = constant %[[VAL_100]]#1 {value = 7 : index} : index
// CHECK:           %[[VAL_102:.*]] = arith.addi %[[VAL_82]]#1, %[[VAL_101]] : index
// CHECK:           %[[VAL_103:.*]] = constant %[[VAL_100]]#0 {value = 11 : index} : index
// CHECK:           %[[VAL_104:.*]] = arith.addi %[[VAL_84]]#1, %[[VAL_103]] : index
// CHECK:           memref.dma_start %[[VAL_86]]#1{{\[}}%[[VAL_102]]], %[[VAL_88]]#1{{\[}}%[[VAL_104]]], %[[VAL_90]]#1, %[[VAL_92]]#1{{\[}}%[[VAL_94]]#1] : memref<100xf32>, memref<100xf32, 2>, memref<1xi32>
// CHECK:           %[[VAL_105:.*]] = arith.addi %[[VAL_82]]#0, %[[VAL_96]]#1 : index
// CHECK:           %[[VAL_36]] = br %[[VAL_84]]#0 : index
// CHECK:           %[[VAL_39]] = br %[[VAL_86]]#0 : memref<100xf32>
// CHECK:           %[[VAL_42]] = br %[[VAL_88]]#0 : memref<100xf32, 2>
// CHECK:           %[[VAL_45]] = br %[[VAL_90]]#0 : index
// CHECK:           %[[VAL_48]] = br %[[VAL_92]]#0 : memref<1xi32>
// CHECK:           %[[VAL_51]] = br %[[VAL_94]]#0 : index
// CHECK:           %[[VAL_54]] = br %[[VAL_96]]#0 : index
// CHECK:           %[[VAL_32]] = br %[[VAL_97]] : index
// CHECK:           %[[VAL_29]] = br %[[VAL_100]]#2 : none
// CHECK:           %[[VAL_57]] = br %[[VAL_105]] : index
// CHECK:           %[[VAL_106:.*]], %[[VAL_107:.*]] = control_merge %[[VAL_78]] : none
// CHECK:           sink %[[VAL_107]] : index
// CHECK:           return %[[VAL_106]] : none
// CHECK:         }
func @affine_dma_start(%arg0: index) {
  %0 = memref.alloc() : memref<100xf32>
  %1 = memref.alloc() : memref<100xf32, 2>
  %2 = memref.alloc() : memref<1xi32>
  %c0 = arith.constant 0 : index
  %c64 = arith.constant 64 : index
  %c0_0 = arith.constant 0 : index
  %c10 = arith.constant 10 : index
  %c1 = arith.constant 1 : index
  cf.br ^bb1(%c0_0 : index)
^bb1(%3: index):      // 2 preds: ^bb0, ^bb2
  %4 = arith.cmpi slt, %3, %c10 : index
  cf.cond_br %4, ^bb2, ^bb3
^bb2: // pred: ^bb1
  %c7 = arith.constant 7 : index
  %5 = arith.addi %3, %c7 : index
  %c11 = arith.constant 11 : index
  %6 = arith.addi %arg0, %c11 : index
  memref.dma_start %0[%5], %1[%6], %c64, %2[%c0] : memref<100xf32>, memref<100xf32, 2>, memref<1xi32>
  %7 = arith.addi %3, %c1 : index
  cf.br ^bb1(%7 : index)
^bb3: // pred: ^bb1
  return
}
