// NOTE: Assertions have been autogenerated by utils/update_mlir_test_checks.py
// RUN: circt-opt -lower-std-to-handshake %s | FileCheck %s
// CHECK-LABEL:   handshake.func @min_reduction_tree(
// CHECK-SAME:                                       %[[VAL_0:.*]]: index,
// CHECK-SAME:                                       %[[VAL_1:.*]]: none, ...) -> none attributes {argNames = ["in0", "inCtrl"], resNames = ["outCtrl"]} {
// CHECK:           %[[VAL_2:.*]] = merge %[[VAL_0]] : index
// CHECK:           %[[VAL_3:.*]]:14 = fork [14] %[[VAL_2]] : index
// CHECK:           %[[VAL_4:.*]]:3 = fork [3] %[[VAL_1]] : none
// CHECK:           %[[VAL_5:.*]] = constant %[[VAL_4]]#1 {value = 0 : index} : index
// CHECK:           %[[VAL_6:.*]] = arith.cmpi slt, %[[VAL_3]]#12, %[[VAL_3]]#13 : index
// CHECK:           %[[VAL_7:.*]] = select %[[VAL_6]], %[[VAL_3]]#11, %[[VAL_3]]#10 : index
// CHECK:           %[[VAL_8:.*]]:2 = fork [2] %[[VAL_7]] : index
// CHECK:           %[[VAL_9:.*]] = arith.cmpi slt, %[[VAL_8]]#1, %[[VAL_3]]#9 : index
// CHECK:           %[[VAL_10:.*]] = select %[[VAL_9]], %[[VAL_3]]#8, %[[VAL_8]]#0 : index
// CHECK:           %[[VAL_11:.*]]:2 = fork [2] %[[VAL_10]] : index
// CHECK:           %[[VAL_12:.*]] = arith.cmpi slt, %[[VAL_11]]#1, %[[VAL_3]]#7 : index
// CHECK:           %[[VAL_13:.*]] = select %[[VAL_12]], %[[VAL_3]]#6, %[[VAL_11]]#0 : index
// CHECK:           %[[VAL_14:.*]]:2 = fork [2] %[[VAL_13]] : index
// CHECK:           %[[VAL_15:.*]] = arith.cmpi slt, %[[VAL_14]]#1, %[[VAL_3]]#5 : index
// CHECK:           %[[VAL_16:.*]] = select %[[VAL_15]], %[[VAL_3]]#4, %[[VAL_14]]#0 : index
// CHECK:           %[[VAL_17:.*]]:2 = fork [2] %[[VAL_16]] : index
// CHECK:           %[[VAL_18:.*]] = arith.cmpi slt, %[[VAL_17]]#1, %[[VAL_3]]#3 : index
// CHECK:           %[[VAL_19:.*]] = select %[[VAL_18]], %[[VAL_3]]#2, %[[VAL_17]]#0 : index
// CHECK:           %[[VAL_20:.*]]:2 = fork [2] %[[VAL_19]] : index
// CHECK:           %[[VAL_21:.*]] = arith.cmpi slt, %[[VAL_20]]#1, %[[VAL_3]]#1 : index
// CHECK:           %[[VAL_22:.*]] = select %[[VAL_21]], %[[VAL_3]]#0, %[[VAL_20]]#0 : index
// CHECK:           %[[VAL_23:.*]] = constant %[[VAL_4]]#0 {value = 1 : index} : index
// CHECK:           %[[VAL_24:.*]] = br %[[VAL_4]]#2 : none
// CHECK:           %[[VAL_25:.*]] = br %[[VAL_5]] : index
// CHECK:           %[[VAL_26:.*]] = br %[[VAL_22]] : index
// CHECK:           %[[VAL_27:.*]] = br %[[VAL_23]] : index
// CHECK:           %[[VAL_28:.*]], %[[VAL_29:.*]] = control_merge %[[VAL_24]] : none
// CHECK:           %[[VAL_30:.*]]:3 = fork [3] %[[VAL_29]] : index
// CHECK:           %[[VAL_31:.*]] = buffer [1] seq %[[VAL_32:.*]] {initValues = [0]} : i1
// CHECK:           %[[VAL_33:.*]]:4 = fork [4] %[[VAL_31]] : i1
// CHECK:           %[[VAL_34:.*]] = mux %[[VAL_33]]#3 {{\[}}%[[VAL_28]], %[[VAL_35:.*]]] : i1, none
// CHECK:           %[[VAL_36:.*]] = mux %[[VAL_30]]#2 {{\[}}%[[VAL_26]]] : index, index
// CHECK:           %[[VAL_37:.*]] = mux %[[VAL_33]]#2 {{\[}}%[[VAL_36]], %[[VAL_38:.*]]] : i1, index
// CHECK:           %[[VAL_39:.*]]:2 = fork [2] %[[VAL_37]] : index
// CHECK:           %[[VAL_40:.*]] = mux %[[VAL_30]]#1 {{\[}}%[[VAL_27]]] : index, index
// CHECK:           %[[VAL_41:.*]] = mux %[[VAL_33]]#1 {{\[}}%[[VAL_40]], %[[VAL_42:.*]]] : i1, index
// CHECK:           %[[VAL_43:.*]] = mux %[[VAL_30]]#0 {{\[}}%[[VAL_25]]] : index, index
// CHECK:           %[[VAL_44:.*]] = mux %[[VAL_33]]#0 {{\[}}%[[VAL_43]], %[[VAL_45:.*]]] : i1, index
// CHECK:           %[[VAL_46:.*]]:2 = fork [2] %[[VAL_44]] : index
// CHECK:           %[[VAL_32]] = merge %[[VAL_47:.*]]#0 : i1
// CHECK:           %[[VAL_48:.*]] = arith.cmpi slt, %[[VAL_46]]#0, %[[VAL_39]]#0 : index
// CHECK:           %[[VAL_47]]:5 = fork [5] %[[VAL_48]] : i1
// CHECK:           %[[VAL_49:.*]], %[[VAL_50:.*]] = cond_br %[[VAL_47]]#4, %[[VAL_39]]#1 : index
// CHECK:           sink %[[VAL_50]] : index
// CHECK:           %[[VAL_51:.*]], %[[VAL_52:.*]] = cond_br %[[VAL_47]]#3, %[[VAL_41]] : index
// CHECK:           sink %[[VAL_52]] : index
// CHECK:           %[[VAL_53:.*]], %[[VAL_54:.*]] = cond_br %[[VAL_47]]#2, %[[VAL_34]] : none
// CHECK:           %[[VAL_55:.*]], %[[VAL_56:.*]] = cond_br %[[VAL_47]]#1, %[[VAL_46]]#1 : index
// CHECK:           sink %[[VAL_56]] : index
// CHECK:           %[[VAL_57:.*]] = merge %[[VAL_55]] : index
// CHECK:           %[[VAL_58:.*]] = merge %[[VAL_51]] : index
// CHECK:           %[[VAL_59:.*]]:2 = fork [2] %[[VAL_58]] : index
// CHECK:           %[[VAL_60:.*]] = merge %[[VAL_49]] : index
// CHECK:           %[[VAL_61:.*]], %[[VAL_62:.*]] = control_merge %[[VAL_53]] : none
// CHECK:           sink %[[VAL_62]] : index
// CHECK:           %[[VAL_63:.*]] = arith.addi %[[VAL_57]], %[[VAL_59]]#1 : index
// CHECK:           %[[VAL_42]] = br %[[VAL_59]]#0 : index
// CHECK:           %[[VAL_38]] = br %[[VAL_60]] : index
// CHECK:           %[[VAL_35]] = br %[[VAL_61]] : none
// CHECK:           %[[VAL_45]] = br %[[VAL_63]] : index
// CHECK:           %[[VAL_64:.*]], %[[VAL_65:.*]] = control_merge %[[VAL_54]] : none
// CHECK:           sink %[[VAL_65]] : index
// CHECK:           return %[[VAL_64]] : none
// CHECK:         }
func @min_reduction_tree(%arg0: index) {
  %c0 = arith.constant 0 : index
  %0 = arith.cmpi slt, %arg0, %arg0 : index
  %1 = arith.select %0, %arg0, %arg0 : index
  %2 = arith.cmpi slt, %1, %arg0 : index
  %3 = arith.select %2, %1, %arg0 : index
  %4 = arith.cmpi slt, %3, %arg0 : index
  %5 = arith.select %4, %3, %arg0 : index
  %6 = arith.cmpi slt, %5, %arg0 : index
  %7 = arith.select %6, %5, %arg0 : index
  %8 = arith.cmpi slt, %7, %arg0 : index
  %9 = arith.select %8, %7, %arg0 : index
  %10 = arith.cmpi slt, %9, %arg0 : index
  %11 = arith.select %10, %9, %arg0 : index
  %c1 = arith.constant 1 : index
  cf.br ^bb1(%c0 : index)
^bb1(%12: index):     // 2 preds: ^bb0, ^bb2
  %13 = arith.cmpi slt, %12, %11 : index
  cf.cond_br %13, ^bb2, ^bb3
^bb2: // pred: ^bb1
  %14 = arith.addi %12, %c1 : index
  cf.br ^bb1(%14 : index)
^bb3: // pred: ^bb1
  return
}
