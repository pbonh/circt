// NOTE: Assertions have been autogenerated by utils/update_mlir_test_checks.py
// RUN: circt-opt -lower-std-to-handshake %s | FileCheck %s
// CHECK-LABEL:   handshake.func @more_imperfectly_nested_loops(
// CHECK-SAME:                                                  %[[VAL_0:.*]]: none, ...) -> none attributes {argNames = ["inCtrl"], resNames = ["outCtrl"]} {
// CHECK:           %[[VAL_1:.*]]:4 = fork [4] %[[VAL_0]] : none
// CHECK:           %[[VAL_2:.*]] = constant %[[VAL_1]]#2 {value = 0 : index} : index
// CHECK:           %[[VAL_3:.*]] = constant %[[VAL_1]]#1 {value = 42 : index} : index
// CHECK:           %[[VAL_4:.*]] = constant %[[VAL_1]]#0 {value = 1 : index} : index
// CHECK:           %[[VAL_5:.*]] = br %[[VAL_1]]#3 : none
// CHECK:           %[[VAL_6:.*]] = br %[[VAL_2]] : index
// CHECK:           %[[VAL_7:.*]] = br %[[VAL_3]] : index
// CHECK:           %[[VAL_8:.*]] = br %[[VAL_4]] : index
// CHECK:           %[[VAL_9:.*]], %[[VAL_10:.*]] = control_merge %[[VAL_5]] : none
// CHECK:           %[[VAL_11:.*]]:3 = fork [3] %[[VAL_10]] : index
// CHECK:           %[[VAL_12:.*]] = buffer [1] seq %[[VAL_13:.*]] {initValues = [0]} : i1
// CHECK:           %[[VAL_14:.*]]:4 = fork [4] %[[VAL_12]] : i1
// CHECK:           %[[VAL_15:.*]] = mux %[[VAL_14]]#3 {{\[}}%[[VAL_9]], %[[VAL_16:.*]]] : i1, none
// CHECK:           %[[VAL_17:.*]] = mux %[[VAL_11]]#2 {{\[}}%[[VAL_7]]] : index, index
// CHECK:           %[[VAL_18:.*]] = mux %[[VAL_14]]#2 {{\[}}%[[VAL_17]], %[[VAL_19:.*]]] : i1, index
// CHECK:           %[[VAL_20:.*]]:2 = fork [2] %[[VAL_18]] : index
// CHECK:           %[[VAL_21:.*]] = mux %[[VAL_11]]#1 {{\[}}%[[VAL_8]]] : index, index
// CHECK:           %[[VAL_22:.*]] = mux %[[VAL_14]]#1 {{\[}}%[[VAL_21]], %[[VAL_23:.*]]] : i1, index
// CHECK:           %[[VAL_24:.*]] = mux %[[VAL_11]]#0 {{\[}}%[[VAL_6]]] : index, index
// CHECK:           %[[VAL_25:.*]] = mux %[[VAL_14]]#0 {{\[}}%[[VAL_24]], %[[VAL_26:.*]]] : i1, index
// CHECK:           %[[VAL_27:.*]]:2 = fork [2] %[[VAL_25]] : index
// CHECK:           %[[VAL_13]] = merge %[[VAL_28:.*]]#0 : i1
// CHECK:           %[[VAL_29:.*]] = arith.cmpi slt, %[[VAL_27]]#0, %[[VAL_20]]#0 : index
// CHECK:           %[[VAL_28]]:5 = fork [5] %[[VAL_29]] : i1
// CHECK:           %[[VAL_30:.*]], %[[VAL_31:.*]] = cond_br %[[VAL_28]]#4, %[[VAL_20]]#1 : index
// CHECK:           sink %[[VAL_31]] : index
// CHECK:           %[[VAL_32:.*]], %[[VAL_33:.*]] = cond_br %[[VAL_28]]#3, %[[VAL_22]] : index
// CHECK:           sink %[[VAL_33]] : index
// CHECK:           %[[VAL_34:.*]], %[[VAL_35:.*]] = cond_br %[[VAL_28]]#2, %[[VAL_15]] : none
// CHECK:           %[[VAL_36:.*]], %[[VAL_37:.*]] = cond_br %[[VAL_28]]#1, %[[VAL_27]]#1 : index
// CHECK:           sink %[[VAL_37]] : index
// CHECK:           %[[VAL_38:.*]] = merge %[[VAL_36]] : index
// CHECK:           %[[VAL_39:.*]] = merge %[[VAL_32]] : index
// CHECK:           %[[VAL_40:.*]] = merge %[[VAL_30]] : index
// CHECK:           %[[VAL_41:.*]], %[[VAL_42:.*]] = control_merge %[[VAL_34]] : none
// CHECK:           %[[VAL_43:.*]]:4 = fork [4] %[[VAL_41]] : none
// CHECK:           sink %[[VAL_42]] : index
// CHECK:           %[[VAL_44:.*]] = constant %[[VAL_43]]#2 {value = 7 : index} : index
// CHECK:           %[[VAL_45:.*]] = constant %[[VAL_43]]#1 {value = 56 : index} : index
// CHECK:           %[[VAL_46:.*]] = constant %[[VAL_43]]#0 {value = 2 : index} : index
// CHECK:           %[[VAL_47:.*]] = br %[[VAL_38]] : index
// CHECK:           %[[VAL_48:.*]] = br %[[VAL_39]] : index
// CHECK:           %[[VAL_49:.*]] = br %[[VAL_40]] : index
// CHECK:           %[[VAL_50:.*]] = br %[[VAL_43]]#3 : none
// CHECK:           %[[VAL_51:.*]] = br %[[VAL_44]] : index
// CHECK:           %[[VAL_52:.*]] = br %[[VAL_45]] : index
// CHECK:           %[[VAL_53:.*]] = br %[[VAL_46]] : index
// CHECK:           %[[VAL_54:.*]] = mux %[[VAL_55:.*]]#5 {{\[}}%[[VAL_56:.*]], %[[VAL_52]]] : index, index
// CHECK:           %[[VAL_57:.*]]:2 = fork [2] %[[VAL_54]] : index
// CHECK:           %[[VAL_58:.*]] = mux %[[VAL_55]]#4 {{\[}}%[[VAL_59:.*]], %[[VAL_53]]] : index, index
// CHECK:           %[[VAL_60:.*]] = mux %[[VAL_55]]#3 {{\[}}%[[VAL_61:.*]], %[[VAL_47]]] : index, index
// CHECK:           %[[VAL_62:.*]] = mux %[[VAL_55]]#2 {{\[}}%[[VAL_63:.*]], %[[VAL_48]]] : index, index
// CHECK:           %[[VAL_64:.*]] = mux %[[VAL_55]]#1 {{\[}}%[[VAL_65:.*]], %[[VAL_49]]] : index, index
// CHECK:           %[[VAL_66:.*]], %[[VAL_67:.*]] = control_merge %[[VAL_68:.*]], %[[VAL_50]] : none
// CHECK:           %[[VAL_55]]:6 = fork [6] %[[VAL_67]] : index
// CHECK:           %[[VAL_69:.*]] = mux %[[VAL_55]]#0 {{\[}}%[[VAL_70:.*]], %[[VAL_51]]] : index, index
// CHECK:           %[[VAL_71:.*]]:2 = fork [2] %[[VAL_69]] : index
// CHECK:           %[[VAL_72:.*]] = arith.cmpi slt, %[[VAL_71]]#1, %[[VAL_57]]#1 : index
// CHECK:           %[[VAL_73:.*]]:7 = fork [7] %[[VAL_72]] : i1
// CHECK:           %[[VAL_74:.*]], %[[VAL_75:.*]] = cond_br %[[VAL_73]]#6, %[[VAL_57]]#0 : index
// CHECK:           sink %[[VAL_75]] : index
// CHECK:           %[[VAL_76:.*]], %[[VAL_77:.*]] = cond_br %[[VAL_73]]#5, %[[VAL_58]] : index
// CHECK:           sink %[[VAL_77]] : index
// CHECK:           %[[VAL_78:.*]], %[[VAL_79:.*]] = cond_br %[[VAL_73]]#4, %[[VAL_60]] : index
// CHECK:           %[[VAL_80:.*]], %[[VAL_81:.*]] = cond_br %[[VAL_73]]#3, %[[VAL_62]] : index
// CHECK:           %[[VAL_82:.*]], %[[VAL_83:.*]] = cond_br %[[VAL_73]]#2, %[[VAL_64]] : index
// CHECK:           %[[VAL_84:.*]], %[[VAL_85:.*]] = cond_br %[[VAL_73]]#1, %[[VAL_66]] : none
// CHECK:           %[[VAL_86:.*]], %[[VAL_87:.*]] = cond_br %[[VAL_73]]#0, %[[VAL_71]]#0 : index
// CHECK:           sink %[[VAL_87]] : index
// CHECK:           %[[VAL_88:.*]] = merge %[[VAL_86]] : index
// CHECK:           %[[VAL_89:.*]] = merge %[[VAL_76]] : index
// CHECK:           %[[VAL_90:.*]]:2 = fork [2] %[[VAL_89]] : index
// CHECK:           %[[VAL_91:.*]] = merge %[[VAL_74]] : index
// CHECK:           %[[VAL_92:.*]] = merge %[[VAL_78]] : index
// CHECK:           %[[VAL_93:.*]] = merge %[[VAL_80]] : index
// CHECK:           %[[VAL_94:.*]] = merge %[[VAL_82]] : index
// CHECK:           %[[VAL_95:.*]], %[[VAL_96:.*]] = control_merge %[[VAL_84]] : none
// CHECK:           sink %[[VAL_96]] : index
// CHECK:           %[[VAL_97:.*]] = arith.addi %[[VAL_88]], %[[VAL_90]]#1 : index
// CHECK:           %[[VAL_59]] = br %[[VAL_90]]#0 : index
// CHECK:           %[[VAL_56]] = br %[[VAL_91]] : index
// CHECK:           %[[VAL_61]] = br %[[VAL_92]] : index
// CHECK:           %[[VAL_63]] = br %[[VAL_93]] : index
// CHECK:           %[[VAL_65]] = br %[[VAL_94]] : index
// CHECK:           %[[VAL_68]] = br %[[VAL_95]] : none
// CHECK:           %[[VAL_70]] = br %[[VAL_97]] : index
// CHECK:           %[[VAL_98:.*]] = merge %[[VAL_79]] : index
// CHECK:           %[[VAL_99:.*]] = merge %[[VAL_81]] : index
// CHECK:           %[[VAL_100:.*]] = merge %[[VAL_83]] : index
// CHECK:           %[[VAL_101:.*]], %[[VAL_102:.*]] = control_merge %[[VAL_85]] : none
// CHECK:           %[[VAL_103:.*]]:4 = fork [4] %[[VAL_101]] : none
// CHECK:           sink %[[VAL_102]] : index
// CHECK:           %[[VAL_104:.*]] = constant %[[VAL_103]]#2 {value = 18 : index} : index
// CHECK:           %[[VAL_105:.*]] = constant %[[VAL_103]]#1 {value = 37 : index} : index
// CHECK:           %[[VAL_106:.*]] = constant %[[VAL_103]]#0 {value = 3 : index} : index
// CHECK:           %[[VAL_107:.*]] = br %[[VAL_98]] : index
// CHECK:           %[[VAL_108:.*]] = br %[[VAL_99]] : index
// CHECK:           %[[VAL_109:.*]] = br %[[VAL_100]] : index
// CHECK:           %[[VAL_110:.*]] = br %[[VAL_103]]#3 : none
// CHECK:           %[[VAL_111:.*]] = br %[[VAL_104]] : index
// CHECK:           %[[VAL_112:.*]] = br %[[VAL_105]] : index
// CHECK:           %[[VAL_113:.*]] = br %[[VAL_106]] : index
// CHECK:           %[[VAL_114:.*]] = mux %[[VAL_115:.*]]#5 {{\[}}%[[VAL_116:.*]], %[[VAL_112]]] : index, index
// CHECK:           %[[VAL_117:.*]]:2 = fork [2] %[[VAL_114]] : index
// CHECK:           %[[VAL_118:.*]] = mux %[[VAL_115]]#4 {{\[}}%[[VAL_119:.*]], %[[VAL_113]]] : index, index
// CHECK:           %[[VAL_120:.*]] = mux %[[VAL_115]]#3 {{\[}}%[[VAL_121:.*]], %[[VAL_107]]] : index, index
// CHECK:           %[[VAL_122:.*]] = mux %[[VAL_115]]#2 {{\[}}%[[VAL_123:.*]], %[[VAL_108]]] : index, index
// CHECK:           %[[VAL_124:.*]] = mux %[[VAL_115]]#1 {{\[}}%[[VAL_125:.*]], %[[VAL_109]]] : index, index
// CHECK:           %[[VAL_126:.*]], %[[VAL_127:.*]] = control_merge %[[VAL_128:.*]], %[[VAL_110]] : none
// CHECK:           %[[VAL_115]]:6 = fork [6] %[[VAL_127]] : index
// CHECK:           %[[VAL_129:.*]] = mux %[[VAL_115]]#0 {{\[}}%[[VAL_130:.*]], %[[VAL_111]]] : index, index
// CHECK:           %[[VAL_131:.*]]:2 = fork [2] %[[VAL_129]] : index
// CHECK:           %[[VAL_132:.*]] = arith.cmpi slt, %[[VAL_131]]#1, %[[VAL_117]]#1 : index
// CHECK:           %[[VAL_133:.*]]:7 = fork [7] %[[VAL_132]] : i1
// CHECK:           %[[VAL_134:.*]], %[[VAL_135:.*]] = cond_br %[[VAL_133]]#6, %[[VAL_117]]#0 : index
// CHECK:           sink %[[VAL_135]] : index
// CHECK:           %[[VAL_136:.*]], %[[VAL_137:.*]] = cond_br %[[VAL_133]]#5, %[[VAL_118]] : index
// CHECK:           sink %[[VAL_137]] : index
// CHECK:           %[[VAL_138:.*]], %[[VAL_139:.*]] = cond_br %[[VAL_133]]#4, %[[VAL_120]] : index
// CHECK:           %[[VAL_140:.*]], %[[VAL_141:.*]] = cond_br %[[VAL_133]]#3, %[[VAL_122]] : index
// CHECK:           %[[VAL_142:.*]], %[[VAL_143:.*]] = cond_br %[[VAL_133]]#2, %[[VAL_124]] : index
// CHECK:           %[[VAL_144:.*]], %[[VAL_145:.*]] = cond_br %[[VAL_133]]#1, %[[VAL_126]] : none
// CHECK:           %[[VAL_146:.*]], %[[VAL_147:.*]] = cond_br %[[VAL_133]]#0, %[[VAL_131]]#0 : index
// CHECK:           sink %[[VAL_147]] : index
// CHECK:           %[[VAL_148:.*]] = merge %[[VAL_146]] : index
// CHECK:           %[[VAL_149:.*]] = merge %[[VAL_136]] : index
// CHECK:           %[[VAL_150:.*]]:2 = fork [2] %[[VAL_149]] : index
// CHECK:           %[[VAL_151:.*]] = merge %[[VAL_134]] : index
// CHECK:           %[[VAL_152:.*]] = merge %[[VAL_138]] : index
// CHECK:           %[[VAL_153:.*]] = merge %[[VAL_140]] : index
// CHECK:           %[[VAL_154:.*]] = merge %[[VAL_142]] : index
// CHECK:           %[[VAL_155:.*]], %[[VAL_156:.*]] = control_merge %[[VAL_144]] : none
// CHECK:           sink %[[VAL_156]] : index
// CHECK:           %[[VAL_157:.*]] = arith.addi %[[VAL_148]], %[[VAL_150]]#1 : index
// CHECK:           %[[VAL_119]] = br %[[VAL_150]]#0 : index
// CHECK:           %[[VAL_116]] = br %[[VAL_151]] : index
// CHECK:           %[[VAL_121]] = br %[[VAL_152]] : index
// CHECK:           %[[VAL_123]] = br %[[VAL_153]] : index
// CHECK:           %[[VAL_125]] = br %[[VAL_154]] : index
// CHECK:           %[[VAL_128]] = br %[[VAL_155]] : none
// CHECK:           %[[VAL_130]] = br %[[VAL_157]] : index
// CHECK:           %[[VAL_158:.*]] = merge %[[VAL_139]] : index
// CHECK:           %[[VAL_159:.*]] = merge %[[VAL_141]] : index
// CHECK:           %[[VAL_160:.*]]:2 = fork [2] %[[VAL_159]] : index
// CHECK:           %[[VAL_161:.*]] = merge %[[VAL_143]] : index
// CHECK:           %[[VAL_162:.*]], %[[VAL_163:.*]] = control_merge %[[VAL_145]] : none
// CHECK:           sink %[[VAL_163]] : index
// CHECK:           %[[VAL_164:.*]] = arith.addi %[[VAL_158]], %[[VAL_160]]#1 : index
// CHECK:           %[[VAL_23]] = br %[[VAL_160]]#0 : index
// CHECK:           %[[VAL_19]] = br %[[VAL_161]] : index
// CHECK:           %[[VAL_16]] = br %[[VAL_162]] : none
// CHECK:           %[[VAL_26]] = br %[[VAL_164]] : index
// CHECK:           %[[VAL_165:.*]], %[[VAL_166:.*]] = control_merge %[[VAL_35]] : none
// CHECK:           sink %[[VAL_166]] : index
// CHECK:           return %[[VAL_165]] : none
// CHECK:         }
func @more_imperfectly_nested_loops() {
  %c0 = arith.constant 0 : index
  %c42 = arith.constant 42 : index
  %c1 = arith.constant 1 : index
  cf.br ^bb1(%c0 : index)
^bb1(%0: index):      // 2 preds: ^bb0, ^bb8
  %1 = arith.cmpi slt, %0, %c42 : index
  cf.cond_br %1, ^bb2, ^bb9
^bb2: // pred: ^bb1
  %c7 = arith.constant 7 : index
  %c56 = arith.constant 56 : index
  %c2 = arith.constant 2 : index
  cf.br ^bb3(%c7 : index)
^bb3(%2: index):      // 2 preds: ^bb2, ^bb4
  %3 = arith.cmpi slt, %2, %c56 : index
  cf.cond_br %3, ^bb4, ^bb5
^bb4: // pred: ^bb3
  %4 = arith.addi %2, %c2 : index
  cf.br ^bb3(%4 : index)
^bb5: // pred: ^bb3
  %c18 = arith.constant 18 : index
  %c37 = arith.constant 37 : index
  %c3 = arith.constant 3 : index
  cf.br ^bb6(%c18 : index)
^bb6(%5: index):      // 2 preds: ^bb5, ^bb7
  %6 = arith.cmpi slt, %5, %c37 : index
  cf.cond_br %6, ^bb7, ^bb8
^bb7: // pred: ^bb6
  %7 = arith.addi %5, %c3 : index
  cf.br ^bb6(%7 : index)
^bb8: // pred: ^bb6
  %8 = arith.addi %0, %c1 : index
  cf.br ^bb1(%8 : index)
^bb9: // pred: ^bb1
  return
}
