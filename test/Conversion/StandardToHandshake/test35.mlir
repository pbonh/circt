// NOTE: Assertions have been autogenerated by utils/update_mlir_test_checks.py
// RUN: circt-opt -lower-std-to-handshake %s | FileCheck %s
// CHECK-LABEL:   handshake.func @test(
// CHECK-SAME:                         %[[VAL_0:.*]]: none, ...) -> none attributes {argNames = ["inCtrl"], resNames = ["outCtrl"]} {
// CHECK:           %[[VAL_1:.*]]:3 = memory[ld = 1, st = 1] (%[[VAL_2:.*]], %[[VAL_3:.*]], %[[VAL_4:.*]]) {id = 1 : i32, lsq = false} : memref<10xf32>, (f32, index, index) -> (f32, none, none)
// CHECK:           %[[VAL_5:.*]]:3 = memory[ld = 1, st = 1] (%[[VAL_6:.*]], %[[VAL_7:.*]], %[[VAL_8:.*]]) {id = 0 : i32, lsq = false} : memref<10xf32>, (f32, index, index) -> (f32, none, none)
// CHECK:           %[[VAL_9:.*]]:3 = fork [3] %[[VAL_0]] : none
// CHECK:           %[[VAL_10:.*]]:3 = fork [3] %[[VAL_9]]#2 : none
// CHECK:           %[[VAL_11:.*]] = join %[[VAL_10]]#2, %[[VAL_5]]#2, %[[VAL_1]]#1 : none
// CHECK:           %[[VAL_12:.*]] = constant %[[VAL_10]]#1 {value = 0 : index} : index
// CHECK:           %[[VAL_13:.*]] = constant %[[VAL_10]]#0 {value = 10 : index} : index
// CHECK:           %[[VAL_14:.*]]:3 = fork [3] %[[VAL_13]] : index
// CHECK:           %[[VAL_15:.*]], %[[VAL_8]] = load {{\[}}%[[VAL_14]]#0] %[[VAL_5]]#0, %[[VAL_9]]#1 : index, f32
// CHECK:           %[[VAL_16:.*]]:2 = fork [2] %[[VAL_15]] : f32
// CHECK:           %[[VAL_2]], %[[VAL_3]] = store {{\[}}%[[VAL_14]]#1] %[[VAL_16]]#1, %[[VAL_9]]#0 : index, f32
// CHECK:           %[[VAL_17:.*]] = br %[[VAL_11]] : none
// CHECK:           %[[VAL_18:.*]] = br %[[VAL_12]] : index
// CHECK:           %[[VAL_19:.*]] = br %[[VAL_14]]#2 : index
// CHECK:           %[[VAL_20:.*]] = br %[[VAL_16]]#0 : f32
// CHECK:           %[[VAL_21:.*]], %[[VAL_22:.*]] = control_merge %[[VAL_17]] : none
// CHECK:           %[[VAL_23:.*]]:3 = fork [3] %[[VAL_22]] : index
// CHECK:           %[[VAL_24:.*]] = buffer [1] seq %[[VAL_25:.*]] {initValues = [0]} : i1
// CHECK:           %[[VAL_26:.*]]:4 = fork [4] %[[VAL_24]] : i1
// CHECK:           %[[VAL_27:.*]] = mux %[[VAL_26]]#3 {{\[}}%[[VAL_21]], %[[VAL_28:.*]]] : i1, none
// CHECK:           %[[VAL_29:.*]] = mux %[[VAL_23]]#2 {{\[}}%[[VAL_19]]] : index, index
// CHECK:           %[[VAL_30:.*]] = mux %[[VAL_26]]#2 {{\[}}%[[VAL_29]], %[[VAL_31:.*]]] : i1, index
// CHECK:           %[[VAL_32:.*]]:2 = fork [2] %[[VAL_30]] : index
// CHECK:           %[[VAL_33:.*]] = mux %[[VAL_23]]#1 {{\[}}%[[VAL_20]]] : index, f32
// CHECK:           %[[VAL_34:.*]] = mux %[[VAL_26]]#1 {{\[}}%[[VAL_33]], %[[VAL_35:.*]]] : i1, f32
// CHECK:           %[[VAL_36:.*]] = mux %[[VAL_23]]#0 {{\[}}%[[VAL_18]]] : index, index
// CHECK:           %[[VAL_37:.*]] = mux %[[VAL_26]]#0 {{\[}}%[[VAL_36]], %[[VAL_38:.*]]] : i1, index
// CHECK:           %[[VAL_39:.*]]:2 = fork [2] %[[VAL_37]] : index
// CHECK:           %[[VAL_25]] = merge %[[VAL_40:.*]]#0 : i1
// CHECK:           %[[VAL_41:.*]] = arith.cmpi slt, %[[VAL_39]]#0, %[[VAL_32]]#0 : index
// CHECK:           %[[VAL_40]]:5 = fork [5] %[[VAL_41]] : i1
// CHECK:           %[[VAL_42:.*]], %[[VAL_43:.*]] = cond_br %[[VAL_40]]#4, %[[VAL_32]]#1 : index
// CHECK:           sink %[[VAL_43]] : index
// CHECK:           %[[VAL_44:.*]], %[[VAL_45:.*]] = cond_br %[[VAL_40]]#3, %[[VAL_34]] : f32
// CHECK:           sink %[[VAL_45]] : f32
// CHECK:           %[[VAL_46:.*]], %[[VAL_47:.*]] = cond_br %[[VAL_40]]#2, %[[VAL_27]] : none
// CHECK:           %[[VAL_48:.*]], %[[VAL_49:.*]] = cond_br %[[VAL_40]]#1, %[[VAL_39]]#1 : index
// CHECK:           sink %[[VAL_49]] : index
// CHECK:           %[[VAL_50:.*]] = merge %[[VAL_48]] : index
// CHECK:           %[[VAL_51:.*]] = merge %[[VAL_44]] : f32
// CHECK:           %[[VAL_52:.*]]:2 = fork [2] %[[VAL_51]] : f32
// CHECK:           %[[VAL_53:.*]] = merge %[[VAL_42]] : index
// CHECK:           %[[VAL_54:.*]], %[[VAL_55:.*]] = control_merge %[[VAL_46]] : none
// CHECK:           %[[VAL_56:.*]]:3 = fork [3] %[[VAL_54]] : none
// CHECK:           %[[VAL_57:.*]]:2 = fork [2] %[[VAL_56]]#2 : none
// CHECK:           %[[VAL_58:.*]] = join %[[VAL_57]]#1, %[[VAL_5]]#1, %[[VAL_1]]#2 : none
// CHECK:           sink %[[VAL_55]] : index
// CHECK:           %[[VAL_59:.*]] = constant %[[VAL_57]]#0 {value = 1 : index} : index
// CHECK:           %[[VAL_60:.*]] = arith.addi %[[VAL_50]], %[[VAL_59]] : index
// CHECK:           %[[VAL_61:.*]]:3 = fork [3] %[[VAL_60]] : index
// CHECK:           %[[VAL_62:.*]], %[[VAL_4]] = load {{\[}}%[[VAL_61]]#2] %[[VAL_1]]#0, %[[VAL_56]]#0 : index, f32
// CHECK:           %[[VAL_63:.*]] = arith.addf %[[VAL_52]]#1, %[[VAL_62]] : f32
// CHECK:           %[[VAL_6]], %[[VAL_7]] = store {{\[}}%[[VAL_61]]#1] %[[VAL_63]], %[[VAL_56]]#1 : index, f32
// CHECK:           %[[VAL_35]] = br %[[VAL_52]]#0 : f32
// CHECK:           %[[VAL_31]] = br %[[VAL_53]] : index
// CHECK:           %[[VAL_28]] = br %[[VAL_58]] : none
// CHECK:           %[[VAL_38]] = br %[[VAL_61]]#0 : index
// CHECK:           %[[VAL_64:.*]], %[[VAL_65:.*]] = control_merge %[[VAL_47]] : none
// CHECK:           sink %[[VAL_65]] : index
// CHECK:           return %[[VAL_64]] : none
// CHECK:         }
func @test() {
  %10 = memref.alloc() : memref<10xf32>
  %11 = memref.alloca() : memref<10xf32>
  %c0 = arith.constant 0 : index
  %c10 = arith.constant 10 : index
  %5 = memref.load %10[%c10] : memref<10xf32>
  memref.store %5, %11[%c10] : memref<10xf32>
  cf.br ^bb1(%c0 : index)
^bb1(%1: index):      // 2 preds: ^bb0, ^bb2
  %2 = arith.cmpi slt, %1, %c10 : index
  cf.cond_br %2, ^bb2, ^bb3
^bb2: // pred: ^bb1
  %c1 = arith.constant 1 : index
  %3 = arith.addi %1, %c1 : index
  %7 = memref.load %11[%3] : memref<10xf32>
  %8 = arith.addf %5, %7 : f32
  memref.store %8, %10[%3] : memref<10xf32>
  cf.br ^bb1(%3 : index)
^bb3: // pred: ^bb1
  return
}
