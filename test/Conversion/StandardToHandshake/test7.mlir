// NOTE: Assertions have been autogenerated by utils/update_mlir_test_checks.py
// RUN: circt-opt -lower-std-to-handshake %s | FileCheck %s
// CHECK-LABEL:   handshake.func @simple_loop(
// CHECK-SAME:                                %[[VAL_0:.*]]: none, ...) -> none attributes {argNames = ["inCtrl"], resNames = ["outCtrl"]} {
// CHECK:           %[[VAL_1:.*]] = br %[[VAL_0]] : none
// CHECK:           %[[VAL_2:.*]], %[[VAL_3:.*]] = control_merge %[[VAL_1]] : none
// CHECK:           %[[VAL_4:.*]]:2 = fork [2] %[[VAL_2]] : none
// CHECK:           sink %[[VAL_3]] : index
// CHECK:           %[[VAL_5:.*]] = constant %[[VAL_4]]#0 {value = 1 : index} : index
// CHECK:           %[[VAL_6:.*]] = br %[[VAL_4]]#1 : none
// CHECK:           %[[VAL_7:.*]] = br %[[VAL_5]] : index
// CHECK:           %[[VAL_8:.*]], %[[VAL_9:.*]] = control_merge %[[VAL_6]] : none
// CHECK:           %[[VAL_10:.*]] = buffer [1] seq %[[VAL_11:.*]] {initValues = [0]} : i1
// CHECK:           %[[VAL_12:.*]]:2 = fork [2] %[[VAL_10]] : i1
// CHECK:           %[[VAL_13:.*]] = mux %[[VAL_12]]#1 {{\[}}%[[VAL_8]], %[[VAL_14:.*]]] : i1, none
// CHECK:           %[[VAL_15:.*]]:2 = fork [2] %[[VAL_13]] : none
// CHECK:           %[[VAL_16:.*]] = mux %[[VAL_9]] {{\[}}%[[VAL_7]]] : index, index
// CHECK:           %[[VAL_17:.*]] = mux %[[VAL_12]]#0 {{\[}}%[[VAL_16]], %[[VAL_18:.*]]] : i1, index
// CHECK:           %[[VAL_19:.*]]:2 = fork [2] %[[VAL_17]] : index
// CHECK:           %[[VAL_11]] = merge %[[VAL_20:.*]]#0 : i1
// CHECK:           %[[VAL_21:.*]] = constant %[[VAL_15]]#0 {value = 42 : index} : index
// CHECK:           %[[VAL_22:.*]] = arith.cmpi slt, %[[VAL_19]]#0, %[[VAL_21]] : index
// CHECK:           %[[VAL_20]]:3 = fork [3] %[[VAL_22]] : i1
// CHECK:           %[[VAL_23:.*]], %[[VAL_24:.*]] = cond_br %[[VAL_20]]#2, %[[VAL_15]]#1 : none
// CHECK:           %[[VAL_25:.*]], %[[VAL_26:.*]] = cond_br %[[VAL_20]]#1, %[[VAL_19]]#1 : index
// CHECK:           sink %[[VAL_26]] : index
// CHECK:           %[[VAL_27:.*]] = merge %[[VAL_25]] : index
// CHECK:           %[[VAL_28:.*]], %[[VAL_29:.*]] = control_merge %[[VAL_23]] : none
// CHECK:           %[[VAL_30:.*]]:2 = fork [2] %[[VAL_28]] : none
// CHECK:           sink %[[VAL_29]] : index
// CHECK:           %[[VAL_31:.*]] = constant %[[VAL_30]]#0 {value = 1 : index} : index
// CHECK:           %[[VAL_32:.*]] = arith.addi %[[VAL_27]], %[[VAL_31]] : index
// CHECK:           %[[VAL_14]] = br %[[VAL_30]]#1 : none
// CHECK:           %[[VAL_18]] = br %[[VAL_32]] : index
// CHECK:           %[[VAL_33:.*]], %[[VAL_34:.*]] = control_merge %[[VAL_24]] : none
// CHECK:           sink %[[VAL_34]] : index
// CHECK:           return %[[VAL_33]] : none
// CHECK:         }
func @simple_loop() {
^bb0:
  cf.br ^bb1
^bb1:	// pred: ^bb0
  %c1 = arith.constant 1 : index
  cf.br ^bb2(%c1 : index)
^bb2(%0: index):	// 2 preds: ^bb1, ^bb3
  %c42 = arith.constant 42 : index
  %1 = arith.cmpi slt, %0, %c42 : index
  cf.cond_br %1, ^bb3, ^bb4
^bb3:	// pred: ^bb2
  %c1_0 = arith.constant 1 : index
  %2 = arith.addi %0, %c1_0 : index
  cf.br ^bb2(%2 : index)
^bb4:	// pred: ^bb2
  return
}
