//===- CHALKOps.cpp - Implementation of CHALK dialect operations --------------===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//

#include "circt/Dialect/CHALK/CHALKOps.h"
#include "mlir/IR/BuiltinOps.h"
#include "mlir/IR/DialectImplementation.h"
#include "mlir/IR/Builders.h"
#include "mlir/IR/FunctionImplementation.h"
#include "mlir/IR/PatternMatch.h"
#include "mlir/IR/SymbolTable.h"

using namespace mlir;
using namespace circt;
using namespace chalk;

//===----------------------------------------------------------------------===//
// CellOp
//===----------------------------------------------------------------------===//

// ParseResult CellOp::parse(OpAsmParser &parser, OperationState &result) {
//   // auto buildFuncType =
//   //     [](Builder &builder, ArrayRef<Type> argTypes, ArrayRef<Type> results,
//   //        function_interface_impl::VariadicFlag,
//   //        std::string &) { return builder.getFunctionType(argTypes, results); };
// 
//   // return function_interface_impl::parseFunctionOp(
//   //     parser, result, /*allowVariadic=*/false, buildFuncType);
//   using namespace mlir::function_interface_impl;
// 
//   auto loc = parser.getCurrentLocation();
//   auto &builder = parser.getBuilder();
// 
//   // Parse the name as a symbol.
//   StringAttr nameAttr;
//   if (parser.parseSymbolName(nameAttr, SymbolTable::getSymbolAttrName(),
//                              result.attributes))
//     return failure();
// 
//   // Parse the optional function body.
//   auto *body = result.addRegion();
//   if (parser.parseRegion(*body))
//     return failure();
//   return success();
// }
// 
// void CellOp::print(OpAsmPrinter &p) {
//   FunctionType fnType = getType();
//   function_interface_impl::printFunctionOp(
//       p, *this, fnType.getInputs(), /*isVariadic=*/false, fnType.getResults());
// }
// 
// static LogicalResult verifyCellOp(CellOp op) {
//   // // If this function is external there is nothing to do.
//   // if (op.isExternal())
//   //   return success();
// 
//   // if (op.cell_name().empty())
//   //   return op.emitOpError("Cell must be named");
// 
//   // // Verify that the machine only has one block terminated with OutputOp.
//   // if (!llvm::hasSingleElement(op))
//   //   return op.emitOpError("must only have a single block");
// 
//   return success();
// }

//===----------------------------------------------------------------------===//
// TableGen generated logic
//===----------------------------------------------------------------------===//

// Provide the autogenerated implementation guts for the Op classes.
#define GET_OP_CLASSES
#include "circt/Dialect/CHALK/CHALK.cpp.inc"
#undef GET_OP_CLASSES

#include "circt/Dialect/CHALK/CHALKDialect.cpp.inc"
